@using System.Text
@using Escc.Umbraco.PropertyTypes
@using File = System.IO.File
@inherits Umbraco.Web.Mvc.UmbracoViewPage<Escc.EastSussexGovUK.Umbraco.Web.CampaignTemplates.CampaignLandingViewModel>
@functions
{
    /// <summary>
    /// Convert a hex colour to an RGBA colour with 80% opacity
    /// </summary>
    /// <param name="colour">#ABC123</param>
    /// <param name="opacity">.8</param>
    /// <returns>rgb(11,22,33,.8)</returns>
    public string HexToRgba(string colour, string opacity)
    {
        if (!String.IsNullOrEmpty(colour) && colour.StartsWith("#", StringComparison.Ordinal))
        {
            var red = int.Parse(colour.Substring(1, 2), System.Globalization.NumberStyles.HexNumber);
            var green = int.Parse(colour.Substring(3, 2), System.Globalization.NumberStyles.HexNumber);
            var blue = int.Parse(colour.Substring(5, 2), System.Globalization.NumberStyles.HexNumber);
            return new StringBuilder("rgba(").Append(red).Append(",").Append(green).Append(",").Append(blue).Append(",").Append(opacity).Append(")").ToString();
        }

        // If it wasn't a hex colour just return it unchanged
        return colour;
    }
}
@{
    Layout = null;
    Response.ContentType = "text/css";
    Image image = null;
    var css = new StringBuilder();
    var customCss = String.Empty;
    var introAlignedAtMedium = Model.AlignIntroductionMedium == "Left" || Model.AlignIntroductionMedium == "Right";
    var introAlignedAtLarge = Model.AlignIntroductionLarge == "Left" || Model.AlignIntroductionLarge == "Right";
    var landingNavAlignedAtMedium = Model.AlignLandingNavigationMedium == "Left" || Model.AlignLandingNavigationMedium == "Right";
    var landingNavAlignedAtLarge = Model.AlignLandingNavigationLarge == "Left" || Model.AlignLandingNavigationLarge == "Right";
    var buttonsAlignedAtMedium = Model.AlignButtonsMedium == "Left" || Model.AlignButtonsMedium == "Right";
    var buttonsAlignedAtLarge = Model.AlignButtonsLarge == "Left" || Model.AlignButtonsLarge == "Right";

    if (Request.QueryString["media-query"] == "small")
    {
        if (!String.IsNullOrEmpty(Model.BackgroundColour))
        {
            css.Append("body .body { background-color: ").Append(Model.BackgroundColour).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.BreadcrumbColour))
        {
            css.Append(".campaign-landing .breadcrumb-mobile, .campaign-landing .breadcrumb-mobile a:link, .campaign-landing .breadcrumb-mobile a:visited, .campaign-landing ol.breadcrumb, .campaign-landing ol.breadcrumb li, .campaign-landing ol.breadcrumb a:link, .campaign-landing ol.breadcrumb a:visited { color: ").Append(Model.BreadcrumbColour).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.HeadingColour))
        {
            css.Append("h1 { color: ").Append(Model.HeadingColour).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.IntroductionColour))
        {
            css.Append(".intro p { color: ").Append(Model.IntroductionColour).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.ContentColour))
        {
            css.Append(".landing-content * { color: ").Append(Model.ContentColour).Append("; }");
        }
        image = Model.BackgroundImageSmall;
        customCss = Model.CustomCssSmallScreen.ToHtmlString();
        if (!String.IsNullOrEmpty(Model.LandingNavigationBackgroundColour))
        {
            css.Append(".campaign-landing .landing-section h2 { background: ").Append(HexToRgba(Model.LandingNavigationBackgroundColour, ".9")).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.LandingNavigationTextColour))
        {
            css.Append(".landing-section a:link, .landing-section a:visited {color: ").Append(Model.LandingNavigationTextColour).Append("; }");
            css.Append(".landing-section h2 a:after { padding-right: 0; content: none; }");
        }
        if (Model.ButtonsTopMarginSmall.HasValue)
        {
            css.Append(".buttons { margin-top: ").Append(Model.ButtonsTopMarginSmall).Append("px; }");
        }
        if (Model.ShareStyle == "White")
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/share-white.css")));
        }
        else if (Model.ShareStyle == "White on a dark panel")
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/share-white.css")));
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/share-panel.css")));
        }

        if (!String.IsNullOrEmpty(Model.Button1BackgroundColour))
        {
            css.Append(".campaign-landing a.button-1 { background: ").Append(HexToRgba(Model.Button1BackgroundColour, ".8")).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.Button1TextColour))
        {
            css.Append(".campaign-landing a.button-1:link, .campaign-landing a.button-1:visited {color: ").Append(Model.Button1TextColour).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.Button2BackgroundColour))
        {
            css.Append(".campaign-landing a.button-2 { background: ").Append(HexToRgba(Model.Button2BackgroundColour, ".8")).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.Button2TextColour))
        {
            css.Append(".campaign-landing .button-2 a.button-2:link, .campaign-landing a.button-2:visited {color: ").Append(Model.Button2TextColour).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.Button3BackgroundColour))
        {
            css.Append(".campaign-landing a.button-3 { background: ").Append(HexToRgba(Model.Button3BackgroundColour, ".8")).Append("; }");
        }
        if (!String.IsNullOrEmpty(Model.Button3TextColour))
        {
            css.Append(".campaign-landing a.button-3:link, .campaign-landing a.button-3:visited {color: ").Append(Model.Button3TextColour).Append("; }");
        }
    }
    if (Request.QueryString["media-query"] == "medium")
    {
        image = Model.BackgroundImageMedium;
        customCss = Model.CustomCssMediumScreen.ToHtmlString();
        if (introAlignedAtMedium)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-intro-medium.css")));
        }
        if (landingNavAlignedAtMedium)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-landing-nav-medium.css")));
        }
        if (buttonsAlignedAtMedium)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-buttons-medium.css")));
        }
        else
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-buttons-flex.css")));
        }
        if (Model.ButtonsTopMarginMedium.HasValue)
        {
            css.Append(".buttons { margin-top: ").Append(Model.ButtonsTopMarginMedium).Append("px; }");
        }
    }
    if (Request.QueryString["media-query"] == "large")
    {
        image = Model.BackgroundImageLarge;
        customCss = Model.CustomCssLargeScreen.ToHtmlString();
        if (introAlignedAtMedium && !introAlignedAtLarge)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-intro-reset.css")));
        }
        if (introAlignedAtLarge)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-intro-large.css")));
        }
        if (landingNavAlignedAtMedium && !landingNavAlignedAtLarge)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-landing-nav-reset.css")));
        }
        if (landingNavAlignedAtLarge)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-landing-nav-large.css")));
        }
        if (buttonsAlignedAtMedium && !buttonsAlignedAtLarge)
        {
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-buttons-reset.css")));
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-buttons-flex.css")));
        }
        if (buttonsAlignedAtLarge)
        {
            if (!buttonsAlignedAtMedium)
            {
                css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-buttons-reset-flex.css")));
            }
            css.Append(File.ReadAllText(Server.MapPath("~/css/CampaignTemplates/align-buttons-large.css")));
        }
        if (Model.ButtonsTopMarginLarge.HasValue)
        {
            css.Append(".buttons { margin-top: ").Append(Model.ButtonsTopMarginLarge).Append("px; }");
        }
    }
    if (image != null)
    {
        var repeat = "no-repeat";
        if (Model.BackgroundImageWrapsHorizontally && Model.BackgroundImageWrapsVertically)
        {
            repeat = "repeat";
        }
        else if (Model.BackgroundImageWrapsHorizontally)
        {
            repeat = "repeat-x";
        } else if (Model.BackgroundImageWrapsVertically)
        {
            repeat = "repeat-y";
        }
        css.Append("body .body { background-image: url(").Append(image.ImageUrl).Append("); background-repeat: ").Append(repeat).Append("; }");
    }
    css.Append(customCss);
    @Html.Raw(@css);
}