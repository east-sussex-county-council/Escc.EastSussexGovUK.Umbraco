@using System.Text
@using Escc.EastSussexGovUK.Umbraco.Web.Location
@model LocationViewModel
@{
    // Every location template should represent a place, but some can be represented by more specific types. 
    // Match up the document type alias to the schema.org type, and define which types support which properties.
    var schemaType = "Place";
    var schemaTypes = new Dictionary<string, string>()
    {
        {"RecyclingSite", "RecyclingCenter"},
        {"Library", "Library"},
        {"Childcare", "ChildCare"},
        {"CouncilOffice","GovernmentBuilding"},
        {"SportLocation","SportsActivityLocation"},
        {"Park", "Park" }
    };
    var schemaNoBranchOf = new List<string>() { "Place", "GovernmentBuilding", "Park" };
    var schemaNoEmail = new List<string>() { "Place", "GovernmentBuilding", "Park" };
    var schemaNoOpeningHours = new List<string>() {"Place"};
    
    if (schemaTypes.ContainsKey(Model.PageType))
    {
        schemaType = schemaTypes[Model.PageType];
    }

    // Most types can accommodate an email address, but not all 
    // TODO: JSON-LD/RDF allows mixing types. Would Google parse an email address included that way?
    var email = schemaNoEmail.Contains(schemaType) ? String.Empty : UpToTwoValues("email", Model.Email1, Model.Email2);
    
    // Fax and phone can have multiple values
    var fax = UpToTwoValues("faxNumber", Model.Fax1, Model.Fax2);
    var phone = UpToTwoValues("telephone", Model.Phone1, Model.Phone2);
    
    // We don't display the responsible authority for every type of location but, for metadata, it's safe to assume ESCC unless we know otherwise
    var branchOf = String.Empty;
    if (!schemaNoBranchOf.Contains(schemaType))
    {
        var responsibleAuthority = String.IsNullOrEmpty(Model.ResponsibleAuthority) ? "East Sussex County Council" : Model.ResponsibleAuthority;
        branchOf = "\"branchOf\": { \"@type\": \"GovernmentOrganization\", \"name\": \"" + responsibleAuthority +"\",";
    }

    // Parse opening hours into the format required by schema.org
    var openingHours = schemaNoOpeningHours.Contains(schemaType) ? String.Empty : OpeningTimesJson(Model.OpeningHours);

    // If this is a recycling site, we can list the recyclable items as an Offer to Dispose of them
    var offers = OffersJson(Model.WasteTypesAccepted);
}
<script type="application/ld+json">
{
    "@@context": "http://schema.org",
    "@@type": "@schemaType",
    @Html.Raw(openingHours)
    @Html.Raw(offers)
    @Html.Raw(branchOf)
    @Html.Raw(email)
    @Html.Raw(fax)
    @Html.Raw(phone)
    "name": "@Model.Metadata.Title",
    "description": "@Model.Metadata.Description",
    "address": {
        "@@type": "PostalAddress",
        "streetAddress": "@Model.Location.BS7666Address.StreetName",
        "addressLocality": "@Model.Location.BS7666Address.Town",
        "addressRegion": "@Model.Location.BS7666Address.AdministrativeArea",
        "postalCode": "@Model.Location.BS7666Address.Postcode",
        "addressCountry": "GB"
    },
    @if (Model.Photo != null)
    {
        @:"photo": "@Model.Photo.ImageUrl",
    }
    "geo": {
        "@@type": "GeoCoordinates",
        "latitude": "@Model.Location.GeoCoordinate.Latitude",
        "longitude": "@Model.Location.GeoCoordinate.Longitude"
    }
}
</script>
@functions
{
    /// <summary>
    /// The Location template allows for two values in properties like email. In schema.org's JSON-LD that can mean a string literal or an array, depending on whether there's data there.
    /// </summary>
    /// <param name="property">The name of the JSON-LD property</param>
    /// <param name="value1">The first value</param>
    /// <param name="value2">The second value</param>
    /// <returns>JSON-LD property with a comma suffix, or an empty string</returns>
    private string UpToTwoValues(string property, string value1, string value2)
    {
        var json = new StringBuilder();
        var hasValue1 = !String.IsNullOrEmpty(value1);
        var hasValue2 = !String.IsNullOrEmpty(value2);
        if (hasValue1 && hasValue2)
        {
            json.Append("\"").Append(property).Append("\": [\"").Append(value1).Append("\",\"").Append(value2).Append("\"],");
        }
        else if (hasValue1)
        {
            json.Append("\"").Append(property).Append("\": \"").Append(value1).Append("\",");
        }
        else if (hasValue2)
        {
            json.Append("\"").Append(property).Append("\": \"").Append(value2).Append("\",");
        }
        return json.ToString();
    }

    /// <summary>
    /// Formats the opening times data into the schema.org JSON-LD format. 
    /// </summary>
    /// <param name="data">Opening times data from the model</param>
    /// <returns>JSON-LD data suffixed with a comma, or an empty string</returns>
    private string OpeningTimesJson(IEnumerable<OpeningTimes> data)
    {
        var openingHours = new StringBuilder();
        foreach (var opening in data)
        {
            if (opening.Scheduled && (opening.OpensAtTime.HasValue && opening.ClosesAtTime.HasValue))
            {
                if (openingHours.Length > 0)
                {
                    openingHours.Append(",");
                }
                openingHours.Append("\"").Append(opening.Day.Substring(0, 2)).Append(" ").Append(opening.OpensAtTime.Value.ToString("HH:mm")).Append("-").Append(opening.ClosesAtTime.Value.ToString("HH:mm")).Append("\"");
            }
            if (opening.Scheduled && (opening.OpensAgainAtTime.HasValue && opening.ClosesAgainAtTime.HasValue))
            {
                if (openingHours.Length > 0)
                {
                    openingHours.Append(",");
                }
                openingHours.Append("\"").Append(opening.Day.Substring(0, 2)).Append(" ").Append(opening.OpensAgainAtTime.Value.ToString("HH:mm")).Append("-").Append(opening.ClosesAgainAtTime.Value.ToString("HH:mm")).Append("\"");
            }
        }

        if (openingHours.Length > 0)
        {
            openingHours.Insert(0, "\"openingHours\": [");
            openingHours.Append("],");
        }
        return openingHours.ToString();
    }

    /// <summary>
    /// Formats the waste types data, if present, into a collection of Offers to Dispose of items
    /// </summary>
    /// <param name="wasteTypesAccepted"></param>
    /// <returns></returns>
    private string OffersJson(IEnumerable<string> wasteTypesAccepted)
    {
        var offers = new StringBuilder();
        foreach (var wasteType in wasteTypesAccepted)
        {
            if (offers.Length > 0)
            {
                offers.Append(",");
            }
            offers.Append("{\"@type\":\"Product\",\"name\":\"").Append(wasteType).Append("\"}");
        }
        if (offers.Length > 0)
        {
            offers.Insert(0, "\"makesOffer\": [{\"@type\":\"Offer\",\"businessFunction\":\"http://purl.org/goodrelations/v1#Dispose\",\"itemOffered\": [");
            offers.Append("]}],");
        }
        return offers.ToString();
    }

}