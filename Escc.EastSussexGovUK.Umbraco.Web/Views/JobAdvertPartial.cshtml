@using System.Text
@using System.Linq
@using Escc.Dates
@using Escc.EastSussexGovUK.Umbraco.Jobs
@model Escc.EastSussexGovUK.Umbraco.Web.Jobs.JobAdvertViewModel
@{
    var jobSummaryHtml = new StringBuilder("<dl class=\"job-summary\">");

    if (!String.IsNullOrEmpty(Model.Job.Reference))
    {
        jobSummaryHtml.Append("<dt>Job reference</dt><dd id=\"job-reference\">").Append(Model.Job.Reference).Append("</dd>");
    }
    if (Model.Job.NumberOfPositions.HasValue)
    {
        jobSummaryHtml.Append("<dt>Number of positions</dt><dd>").Append(Model.Job.NumberOfPositions).Append("</dd>");
    }
    if (Model.Job.Locations !=null && Model.Job.Locations.Count > 0)
    {
        jobSummaryHtml.Append("<dt>Location</dt><dd>").Append(string.Join(", ", Model.Job.Locations.ToArray<string>())).Append("</dd>");
    }
    if (!String.IsNullOrEmpty(Model.Job.Salary.SalaryRange))
    {
        jobSummaryHtml.Append("<dt>").Append(Model.Job.Salary.SalaryRange.Contains("per hour") ? "Hourly rate" : "Salary").Append("</dt><dd>").Append(Model.Job.Salary.SalaryRange).Append("</dd>");
    }
    if (Model.Job.ClosingDate.HasValue)
    {
        jobSummaryHtml.Append("<dt>Closing date</dt><dd>").Append(Model.Job.ClosingDate.Value.ToBritishDateWithDay()).Append("</dd>");
    }
    if (!String.IsNullOrEmpty(Model.Job.Organisation))
    {
        jobSummaryHtml.Append("<dt>Organisation</dt><dd>").Append(Model.Job.Organisation).Append("</dd>");
    }
    if (!String.IsNullOrEmpty(Model.Job.Department))
    {
        jobSummaryHtml.Append("<dt>Department</dt><dd>").Append(Model.Job.Department).Append("</dd>");
    }
    if (!String.IsNullOrEmpty(Model.Job.ContractType))
    {
        jobSummaryHtml.Append("<dt>Contract type</dt><dd>").Append(Model.Job.ContractType).Append("</dd>");
    }
    var workPattern = Model.Job.WorkPattern.ToString();
    if (!String.IsNullOrEmpty(workPattern))
    {
        jobSummaryHtml.Append("<dt>Work pattern</dt><dd>").Append(workPattern).Append("</dd>");
    }
    if (Model.Job.WorkPattern.HoursPerWeek.HasValue)
    {
        jobSummaryHtml.Append("<dt>Hours per week</dt><dd>").Append(Model.Job.WorkPattern.HoursPerWeek).Append("</dd>");
    }
    if (!String.IsNullOrEmpty(Model.Job.JobType))
    {
        jobSummaryHtml.Append("<dt>Job type</dt><dd>").Append(Model.Job.JobType).Append("</dd>");
    }
    jobSummaryHtml.Append("</dl>");
}
<div class="content text-content">
    <h1>@if (Model.Job.LogoUrl != null) {<img src="@Model.Job.LogoUrl" alt="Logo representing this job" class="job-advert-logo" />}@Model.Metadata.Title</h1>
</div>
@Html.Partial("~/Views/EastSussexGovUK/Features/_Latest.cshtml")
<div class="supporting content-small content-medium text-content">
    @Html.Raw(jobSummaryHtml)
</div>

<div class="article">
    <div class="content text-content">
        @Model.Job.AdvertHtml
        @if (Model.Job.ApplyUrl != null)
        {
            <p class="main-action"><a href="@Model.Job.ApplyUrl" class="apply">Apply</a>
            @if (Model.LoginPage != null) {
                @:<span class="login-continue">or <a href="@Model.LoginPage.Url">continue an application you've started</a></span>
            } else if (Model.LoginUrl != null) {
                @:<span class="login-continue">or <a href="@Model.LoginUrl">continue an application you've started</a></span>
            }
            </p>
        }
        @{
            var hasAdditional = Model.Job.AdditionalInformationHtml != null && !String.IsNullOrEmpty(Model.Job.AdditionalInformationHtml.ToHtmlString());
            var additionalHtml = hasAdditional ? Model.Job.AdditionalInformationHtml.ToHtmlString()
                                                    .Replace("<p>", "<p><small>").Replace("</p>", "</small></p>")
                                                    .Replace("<h3>", "<h3><small>").Replace("</h3>", "</small></h3>")
                                               : String.Empty;
            var hasEqualOpps = Model.Job.EqualOpportunitiesHtml != null && !String.IsNullOrEmpty(Model.Job.EqualOpportunitiesHtml.ToHtmlString());
            var equalOpps = hasEqualOpps ? Model.Job.EqualOpportunitiesHtml.ToHtmlString().Replace("<p>", "<p><small>").Replace("</p>", "</small></p>") : String.Empty;
            if (hasAdditional && hasEqualOpps)
            {
                <div class="large">
                    <div class="tablist" role="application">
                        <ul role="tablist">
                            <li id="tab1" aria-controls="tab1content" role="tab">Additional information</li>
                            <li id="tab2" aria-controls="tab2content" role="tab">Equal opportunities</li>
                        </ul>

                        <div id="tab1content" aria-labelledby="tab1" role="tabpanel">
                            <h2 class="aural">Additional information</h2>
                            @Html.Raw(additionalHtml)
                        </div>

                        <div id="tab2content" aria-labelledby="tab2" role="tabpanel" aria-hidden="true">
                            <h2 class="aural">Equal opportunities</h2>
                            @Html.Raw(equalOpps)
                        </div>
                    </div>
                </div>
                <div class="small medium accordion" role="application">
                    <h2 id="accordion1" aria-controls="accordion1content" role="tab">Additional information</h2>
                    <div id="accordion1content" aria-labelledby="accordion1" role="tabpanel">
                        @Html.Raw(additionalHtml)
                    </div>
                    <h2 id="accordion2" aria-controls="accordion2content" role="tab">Equal opportunities</h2>
                    <div id="accordion2content" aria-labelledby="accordion2" role="tabpanel">@Html.Raw(equalOpps)</div>
                </div>
            }
            else if (hasAdditional)
            {
                <h2>Additional information</h2>
                @Html.Raw(additionalHtml)
            }
            else if (hasEqualOpps)
            {
                <h2>Equal opportunities</h2>
                @Html.Raw(equalOpps)
            }
        }
    </div>
</div>
@Html.Partial("~/Views/Layouts/_SocialMedia.cshtml")
@Html.Partial("~/Views/EastSussexGovUK/Features/_SupportingContentDesktop.cshtml")
<script type="application/ld+json">
@{ 
    var employmentTypes = new List<string>();
    if (Model.Job.WorkPattern.WorkPatterns.Contains(WorkPattern.FULL_TIME)) { employmentTypes.Add("FULL_TIME"); }
    if (Model.Job.WorkPattern.WorkPatterns.Contains(WorkPattern.PART_TIME)) { employmentTypes.Add("PART_TIME"); }

    var employmentType = employmentTypes.Count > 0 ? "\"employmentType\": [\"" + String.Join("\", \"", employmentTypes.ToArray()) + "\"]," : String.Empty;
}{
    "@@context": "http://schema.org",
    "@@type": "JobPosting",
@if (Model.Job.Salary.MinimumSalary.HasValue) {
    @:"baseSalary": {
    @:    "@@type": "MonetaryAmount",
    @:    "currency": "GBP",
    @:    "minValue": "@Model.Job.Salary.MinimumSalary",
    @:    "maxValue": "@Model.Job.Salary.MaximumSalary"
    @:            },
}
    "title": "@Model.Job.JobTitle",
    "description": "@Html.Raw(jobSummaryHtml.Replace("\"", "'")) @Html.Raw(Model.Job.AdvertHtml?.ToHtmlString().Replace("\"", "'"))",
    "industry": "Local government",
    @Html.Raw(employmentType)
    @foreach (var location in Model.Job.Locations) {
        var region = "East Sussex";
        if (Model.Job.JobTitle.Contains("Surrey County Council")) { region = "Surrey"; }
        if (location == "Midhurst") { region = "West Susssex"; }
    @:"jobLocation": {
    @:    "@@type": "Place",
    @:    "address": {
    @:        "@@type": "PostalAddress",
    @:        "addressLocality": "@location",
    @:        "addressRegion": "@region",
    @:        "addressCountry": "UK"
    @:     }
    @:},
    }
    "salaryCurrency": "GBP",
    "hiringOrganization": {
            "@@type": "Organization",
        "name": "@Model.Job.Organisation"
        },
    "datePosted": "@Model.Job.DatePublished.ToIso8601DateTime()",
    "validThrough": "@Model.Job.ClosingDate.Value.ToIso8601DateTime()",
    "url": "@Model.Job.Url",
    "identifier": {
            "@@type": "PropertyValue",
        "name": "Reference",
        "value": "@Model.Job.Reference"
    }
    }
</script>