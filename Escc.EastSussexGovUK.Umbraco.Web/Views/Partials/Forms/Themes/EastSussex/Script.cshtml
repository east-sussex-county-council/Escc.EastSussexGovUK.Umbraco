@inherits System.Web.Mvc.WebViewPage<Umbraco.Forms.Mvc.Models.FormViewModel>
@using ClientDependency.Core.Mvc
@using Newtonsoft.Json
@using Umbraco.Forms.Mvc
@using Umbraco.Forms.MVC.Extensions
@using Umbraco.Forms.Web
@using Escc.Web

@{
    var nonce = Guid.NewGuid().ToString().Replace("-", String.Empty);
    new ContentSecurityPolicyHeaders(Response.Headers).AppendPolicy("script-src 'nonce-" + nonce + "'").UpdateHeaders();

    // START: Ethnic group field
    //
    // The 'Ethnic group' field type has two fields in the HTML returned to the client,
    // and the second is only needed if specific values are selected in the first.
    //
    // Inject an extra condition for this page of the form to cause the Umbraco Forms
    // conditional code to handle that for us, so that we can be sure it behaves consistently.

    foreach (var fieldset in Model.CurrentPage.Fieldsets)
    {
        foreach (var group in fieldset.Containers)
        {
            foreach (var field in group.Fields)
            {
                if (field.FieldTypeName == "Ethnic group")
                {
                    var rules = new List<Umbraco.Forms.Web.Models.ConditionRuleViewModel>();
                    rules.Add(new Umbraco.Forms.Web.Models.ConditionRuleViewModel
                    {
                        Field = new Guid(field.Id),
                        FieldsetId = new Guid(fieldset.Id),
                        Operator = Umbraco.Forms.Core.FieldConditionRuleOperator.Contains,
                        Value = "other"
                    });
                    var condition = new Umbraco.Forms.Web.Models.ConditionViewModel
                    {
                        ActionType = Umbraco.Forms.Core.FieldConditionActionType.Show,
                        LogicType = Umbraco.Forms.Core.FieldConditionLogicType.All,
                        Rules = rules
                    };

                    Model.FieldConditions.Add(new Guid("12345678-" + field.Id.Substring(9)), condition);
                }
            }
        }
    }
    // END: Ethnic group field

    var formJsObj = new
    {
        formId = Model.FormClientId,
        fieldSetConditions = Model.FieldsetConditions,
        fieldConditions = Model.FieldConditions,
        recordValues = Model.GetFieldsNotDisplayed()
    };

    Html.AddFormThemeScriptFile(Model, "~/App_Plugins/UmbracoForms/Assets/Themes/Default/umbracoforms.js");
}

<script nonce="@nonce">
    if (typeof umbracoFormsCollection === 'undefined') var umbracoFormsCollection = [];
    umbracoFormsCollection.push(@Html.Raw(JsonConvert.SerializeObject(formJsObj)));
</script>

@* Only render out scripts on the page if the form has not been submitted yet *@
@if (Model.SubmitHandled == false)
{
    @*
        If the current page of the form has any Partial view files attached to render
        Likely used by events and third parties adding tracking or other 3rd party functionality to a form
    *@
    if (Model.CurrentPage.PartialViewFiles.Any())
    {
        foreach (var partial in Model.CurrentPage.PartialViewFiles)
        {
            @Html.Partial(partial.Value)
        }
    }


    @* Render references to javascript files needed by fields on the current page*@
    if (Model.UseClientDependency)
    {
        foreach (var script in Html.GetThemeScriptFiles(Model))
        {
            Html.RequiresJs(script.Value, Model.JavaScriptTagAttributes);
        }

        foreach (var css in Html.GetThemeCssFiles(Model))
        {
            Html.RequiresCss(css.Value);
        }
    }
    else
    {
        @Html.RenderFormsScripts(Url, Model, Model.JavaScriptTagAttributes)
        @Html.RenderFormsStylesheets(Url, Model)
    }

    @Html.RenderFormsScriptCommands(Model)
}