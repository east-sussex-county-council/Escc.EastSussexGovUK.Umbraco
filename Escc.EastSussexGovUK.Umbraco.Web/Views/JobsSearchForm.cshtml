@using Escc.EastSussexGovUK.Umbraco.Web.Jobs
@using Escc.EastSussexGovUK.Umbraco.Web.Jobs.Alerts
@model JobsSearchViewModel

<div>
    <label for="keywords">Keywords</label>
    <input type="search" name="keywords" id="keywords" value="@(Model.Query?.Keywords)" />
</div>

@if (Model.Locations.Any())
{
<div>
<label for="location">Location</label>
<select multiple="multiple" name="locations" id="location" size="10">
    @foreach (var location in Model.Locations)
    {
        var selected = (Model.Query != null && Model.Query.Locations.Contains(location.Text)) ? " selected=\"selected\"" : String.Empty;
        <option value="@location.Text"@selected>@location.Text (@location.Count)</option>
    }
</select>
</div>
}

@if (Model.JobTypes.Any())
{
<div>
    <label for="type">Category</label>
    <select multiple="multiple" name="jobtypes" id="type" size="10">
        @foreach (var jobType in Model.JobTypes)
        {
            var selected = (Model.Query != null && Model.Query.JobTypes.Contains(jobType.Text)) ? " selected=\"selected\"" : String.Empty;
            <option value="@jobType.Text"@selected>@jobType.Text (@jobType.Count)</option>
        }
    </select>
</div>
}

@if (Model.SalaryRanges.Any())
{
<fieldset class="checkboxes">
    <legend>Salary</legend>
    @foreach (var salaryRange in Model.SalaryRanges)
    {
        // Remove the comma from the value to be submitted, as if multiple values are selected they will be separated by commas
        var salaryRangeValue = salaryRange.Text.Replace(",", String.Empty);

        var selected = (Model.Query != null && Model.Query.SalaryRanges.Contains(salaryRange.Text)) ? " checked=\"checked\"" : String.Empty;
        <label><input type="checkbox" value="@salaryRangeValue" name="salaryranges" @selected /> @salaryRange.Text (@salaryRange.Count)</label>
    }
    @foreach (var payGrade in Model.PayGrades)
    {
        // Don't display all pay grades - only if there are results or we're editing an alert - because there are lots but 
        // usually with no results because they're just a fallback for a missing salary range
        var selected = (Model.Query != null && Model.Query.PayGrades.Contains(payGrade.Text));
        if (selected || payGrade.Count > 0)
        {
            var selectedAttribute = selected ? " checked=\"checked\"" : String.Empty;
            <label><input type="checkbox" value="@payGrade.Text" name="paygrades" @selected /> @payGrade.Text (@payGrade.Count)</label>
        }
    }
</fieldset>
}

@if (Model.WorkPatterns.Any())
{
<fieldset class="checkboxes">
    <legend>Work pattern</legend>
    @foreach (var workPattern in Model.WorkPatterns)
    {
        var selected = (Model.Query != null && Model.Query.WorkPatterns.Contains(workPattern.Text)) ? " checked=\"checked\"" : String.Empty;
        <label><input type="checkbox" value="@workPattern.Text" name="workpatterns"@selected /> @workPattern.Text (@workPattern.Count)</label>
    }
</fieldset>
}

@if (Model.ContractTypes.Any())
{
<fieldset class="checkboxes">
    <legend>Contract type</legend>
    @foreach (var contractType in Model.ContractTypes)
    {
        var selected = (Model.Query != null && Model.Query.ContractTypes.Contains(contractType.Text)) ? " checked=\"checked\"" : String.Empty;
        <label><input type="checkbox" value="@contractType.Text" name="contracttypes" @selected /> @contractType.Text (@contractType.Count)</label>
    }
</fieldset>
}

@{
    var alertModel = Model as JobAlertsViewModel;
    if (alertModel != null)
    {
    <fieldset class="radioButtonList">
        <legend>Frequency</legend>
        <label><input type="radio" name="frequency" value="1" @(alertModel.Alert.Frequency == 1 ? " checked=\"checked\"" : String.Empty)/> Daily</label>
        <label><input type="radio" name="frequency" value="7" @(alertModel.Alert.Frequency == 7 ? " checked=\"checked\"" : String.Empty)/> Weekly</label>
    </fieldset>
    <input type="hidden" name="JobsSet" value="@(Model.Query?.JobsSet)" />
    }
}

<input type="submit" value="@Model.SubmitButtonText" />

