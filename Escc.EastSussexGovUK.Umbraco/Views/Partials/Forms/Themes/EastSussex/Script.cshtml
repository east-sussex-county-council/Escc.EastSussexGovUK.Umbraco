@inherits System.Web.Mvc.WebViewPage<Umbraco.Forms.Mvc.Models.FormViewModel>
@using ClientDependency.Core.Mvc
@using Umbraco.Forms.Mvc
@using Umbraco.Forms.MVC.Extensions
@using Umbraco.Forms.Web
@using Escc.Web

@{
    var nonce = Guid.NewGuid().ToString().Replace("-", String.Empty);
    new ContentSecurityPolicyHeaders(Response.Headers).AppendPolicy("script-src 'nonce-" + nonce + "'").UpdateHeaders();

    var fieldsNotDisplayed = Model.Pages
        .Select((x, index) => new { item = x, index = index })
        .Where(x => x.index != Model.FormStep).Select(x => x.item)
        .SelectMany(x => x.Fieldsets)
        .SelectMany(x => x.Containers)
        .SelectMany(x => x.Fields)
        .ToDictionary(f => f.Id, f => string.IsNullOrWhiteSpace(f.Value) == false ? f.ValueAsHtmlString.ToHtmlString() : string.Empty);

    var fieldSetConditions = Html.Raw(Model.FieldsetConditionsAsJson());
    var fieldConditions = Html.Raw(Model.FieldConditionsAsJson());
    var formId = Model.FormClientId;
    var dateFormat = Html.ConvertDateFormat();
    var recordValues = Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(fieldsNotDisplayed));

    // START: Ethnic group field
    //
    // The 'Ethnic group' field type has two fields in the HTML returned to the client, 
    // and the second is only needed if specific values are selected in the first.
    //
    // Inject extra JSON into the conditions setup for this page of the form to cause the Umbraco Forms 
    // conditional code to handle that for us, so that we can be sure it behaves consistently.
    var ethnicConditions = new List<string>();
    foreach (var fieldset in Model.CurrentPage.Fieldsets)
    {
        foreach (var group in fieldset.Containers)
        {
            foreach (var field in group.Fields)
            {
                if (field.FieldTypeName == "Ethnic group")
                {
                    ethnicConditions.Add("'" + field.Id + @"-other': {
    'id': '00000000-0000-0000-0000-000000000000',
    'actionType': 'Show',
    'logicType': 'Any',
    'rules': [
      {
        'id': '00000000-0000-0000-0000-000000000000',
        'fieldsetId': '" + fieldset.Id + @"',
        'field': '" + field.Id + @"',
        'operator': 'Contains',
        'value': 'other'
      },{
        'id': '00000000-0000-0000-0000-000000000000',
        'fieldsetId': '" + fieldset.Id + @"',
        'field': '" + field.Id + @"',
        'operator': 'Contains',
        'value': 'Other'
      }
    ]
  }");
                }
            }
        }
    }

    if (ethnicConditions.Count > 0) {
        var fieldConditionsJson = fieldConditions.ToHtmlString();
        var ethnicConditionsJson = String.Join(",", ethnicConditions.ToArray<string>());
        if (fieldConditionsJson == "{}")
        {
            fieldConditions = new HtmlString("{" + ethnicConditionsJson + "}");
        }
        else
        {
            fieldConditions = new HtmlString("{" + ethnicConditionsJson + "," + fieldConditionsJson.Substring(1));
        }
    }
    // END: Ethnic group field

    var jsCommand = string.Format(@"

            var contourDateFormat = '{0}',
                formId = '{1}',
                fieldSetConditions = {2},
                fieldConditions = {3},
                recordvalues = {4};
            
            umbracoForms.dependencyCheck(formId);

            var form = $('#umbraco_form_' + formId + ' .umbraco-forms-page');
            var conditions = new umbracoForms.conditions(form, fieldSetConditions, fieldConditions, recordvalues);
            conditions.watch();",

            dateFormat,
            formId,
            fieldSetConditions,
            fieldConditions,
            recordValues);



    Html.AddFormThemeScriptFile(Model, "~/App_Plugins/UmbracoForms/Assets/Themes/Default/umbracoforms-dependencies.js");
    Html.AddFormThemeScriptFile(Model, "~/App_Plugins/UmbracoForms/Assets/Themes/Default/umbracoforms.js");
    Html.AddFormThemeScriptFile(Model, "~/App_Plugins/UmbracoForms/Assets/Themes/Default/umbracoforms-conditions.js");

    Html.AddFormThemeScriptCommand(Model, jsCommand);
}


@* Only render out scripts on the page if the form has not been submitted yet *@
@if (Model.SubmitHandled == false)
{
    @*
        If the current page of the form has any Partial view files attached to render
        Likely used by events and third parties adding tracking or other 3rd party functionality to a form
    *@
    if (Model.CurrentPage.PartialViewFiles.Any())
    {
        foreach (var partial in Model.CurrentPage.PartialViewFiles)
        {
                @Html.Partial(partial.Value)
        }
    }


   @* Render references to javascript files needed by fields on the current page*@
   foreach (var script in Html.GetThemeScriptFiles(Model))
   {
        if (Model.UseClientDependency)
        {
            Html.RequiresJs(script.Value);
        }
        else
        {
            <script type="text/javascript" src="@Url.Content(script.Value)"></script>
        }
    }
    

    var commands = Html.GetFormThemeScriptCommands(Model);
   
    @* Render javascript commands to initialise fields *@
    if (commands.Count > 0)
    {
        <script type="text/javascript" nonce="@nonce">
            (function () {
            @foreach (var cmd in commands.Values)
            {
          <text>@Html.Raw(cmd)</text>
            }
            }());
        </script>
    }
}
